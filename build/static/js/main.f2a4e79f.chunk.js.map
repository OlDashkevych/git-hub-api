{"version":3,"sources":["redux/types.js","redux/posts/selector.js","redux/posts/reducer.js","redux/rootReducer.js","redux/store.js","components/Loading/index.tsx","routes/index.js","components/App.tsx","index.js"],"names":["GET_POSTS_START","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","CLEAR_LIST","getItems","state","posts","items","getLoading","loading","combineReducers","type","payload","types","rootReducer","postsReducers","middleware","ReduxThunk","store","configureStore","reducer","Loader","useSelector","postsSelectors","path","url","label","exact","Component","lazy","App","fallback","routes","map","key","component","ReactDOM","render","document","getElementById"],"mappings":"uGAAe,KACbA,gBAAiB,kBACjBC,kBAAmB,oBACnBC,kBAAmB,oBAEnBC,WAAY,e,gCCLd,oEAAO,IAAMC,EAAW,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAChCC,EAAa,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,U,4KC6BhCC,4BAAgB,CAC7BH,MA5BY,WAAoC,IAAnCF,EAAkC,uDAA1B,GAA0B,yCAApBM,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACjC,OAAQD,GACN,KAAKE,IAAMZ,kBACT,OAAOW,EAET,KAAKC,IAAMV,WACT,MAAO,GAET,QACE,OAAOE,IAoBXI,QAhBc,WAA2B,IAA1BJ,EAAyB,uDAAjB,GAAiB,yCAAXM,EAAW,EAAXA,KAC7B,OAAQA,GACN,KAAKE,IAAMb,gBACT,OAAO,EACT,KAAKa,IAAMX,kBAEX,KAAKW,IAAMZ,kBACT,OAAO,EAET,QACE,OAAOI,MCnBES,EAJKJ,0BAAgB,CAClCJ,MAAOS,ICCHC,EAAa,CAACC,KAOLC,EALDC,YAAe,CAC3BC,QAASN,EACTE,e,uCCGaK,EAPA,WACb,IAEMZ,EAFwBa,YAAYC,KAG1C,OAAO,oCAAGd,GAAW,kBAAC,eAAD,QCPVe,EACL,CAAEC,IAAK,IAAKC,MAAO,QAIZ,GACb,CACEF,KAAMA,EAAUC,IAChBC,MAAOF,EAAUE,MACjBC,OAAO,EACPC,UAAWC,gBAAK,kBAAM,yDCcXC,EApBO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC,eAAD,OAClB,kBAAC,IAAD,KACGC,EAAOC,KAAI,gBAAGL,EAAH,EAAGA,UAAWJ,EAAd,EAAcA,KAAME,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,MAA3B,OACV,kBAAC,IAAD,CACEH,KAAMA,EACNU,IAAKR,EACLC,MAAOA,EACPQ,UAAWP,WCVzBQ,IAASC,OACP,kBAAC,IAAD,CAAUnB,MAAOA,GACf,kBAAC,EAAD,OAEFoB,SAASC,eAAe,W","file":"static/js/main.f2a4e79f.chunk.js","sourcesContent":["export default {\n  GET_POSTS_START: 'GET_POSTS_START',\n  GET_POSTS_SUCCESS: 'GET_POSTS_SUCCESS',\n  GET_POSTS_FAILURE: 'GET_POSTS_FAILURE',\n\n  CLEAR_LIST: 'CLEAR_LIST',\n};\n","export const getItems = state => state.posts.items;\nexport const getLoading = state => state.posts.loading;\n","import { combineReducers } from 'redux';\nimport types from '../types';\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.GET_POSTS_SUCCESS:\n      return payload;\n\n    case types.CLEAR_LIST:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst loading = (state = '', { type }) => {\n  switch (type) {\n    case types.GET_POSTS_START:\n      return true;\n    case types.GET_POSTS_FAILURE:\n      return false;\n    case types.GET_POSTS_SUCCESS:\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  loading,\n});\n","import { combineReducers } from 'redux';\nimport postsReducers from './posts/reducer';\n\nconst rootReducer = combineReducers({\n  posts: postsReducers,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport ReduxThunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nconst middleware = [ReduxThunk];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n});\n\nexport default store;\n","import React from 'react';\nimport { BlockLoading } from 'react-loadingg';\nimport { useSelector } from 'react-redux';\nimport * as postsSelectors from '../../redux/posts/selector';\n\nconst Loader = () => {\n  const postsLoading: boolean = useSelector(postsSelectors.getLoading);\n\n  const loading = postsLoading;\n  return <>{loading && <BlockLoading />}</>;\n};\n\nexport default Loader;\n","import { lazy } from 'react';\n\nexport const path = {\n  HOME: { url: '/', label: 'Home' },\n  DETAILS: { url: '/details', label: 'Details' },\n};\n\nexport default [\n  {\n    path: path.HOME.url,\n    label: path.HOME.label,\n    exact: true,\n    Component: lazy(() => import('../views/HomePage/index.tsx')),\n  },\n];\n","import React, { Suspense } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { BlockLoading } from 'react-loadingg';\nimport Loader from './Loading';\nimport routes from '../routes';\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Loader />\n      <Suspense fallback={<BlockLoading />}>\n        <Switch>\n          {routes.map(({ Component, path, label, exact }) => (\n            <Route\n              path={path}\n              key={label}\n              exact={exact}\n              component={Component}\n            />\n          ))}\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './components/App.tsx';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}